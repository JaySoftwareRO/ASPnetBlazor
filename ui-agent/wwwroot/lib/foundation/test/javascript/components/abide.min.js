/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/foundation-sites@6.6.3/test/javascript/components/abide.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("Abide",function(){var e,t;afterEach(function(){e.destroy(),t.remove()}),describe("constructor()",function(){it("stores the element & plugin options",function(){t=$("<form data-abide novalidate></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).$element.should.be.an("object"),e.options.should.be.an("object")}),it("the options are recursively merged",function(){t=$("<form data-abide novalidate></form>").appendTo("body");var i={validators:{notEqualTo:function(e,t,i){return $(`#${e.attr("data-equalto")}`).val()!==e.val()}}};(e=new Foundation.Abide(t,i)).options.validators.should.includes.keys("equalTo","notEqualTo")})}),describe("validateForm()",function(){it("returns true after validation is disabled",function(){t=$("<form data-abide novalidate><input required type='text'><input type='submit'></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).disableValidation(),e.validateForm().should.equal(!0)}),it("returns false after validation is (re)enabled",function(){t=$("<form data-abide novalidate><input required type='text'><input type='submit'></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).disableValidation(),e.enableValidation(),e.validateForm().should.equal(!1)}),it("returns true if first submit has formnovalidate is disabled",function(){t=$("<form data-abide novalidate><input required type='text'><input type='submit' formnovalidate></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateForm().should.equal(!0)})}),describe("validateInput()",function(){it("returns true for hidden inputs",function(){t=$("<form data-abide novalidate><input type='hidden' required></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateInput(t.find("input")).should.equal(!0)}),it("returns true for inputs with [data-abide-ignore]",function(){t=$("<form data-abide novalidate><input type='text' required data-abide-ignore></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateInput(t.find("input")).should.equal(!0)}),it("returns true for checked checkboxes",function(){t=$("<form data-abide novalidate><input type='checkbox' name='groupName' required checked='checked'></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateInput(t.find("input")).should.equal(!0)}),it("returns false for unchecked checkboxes",function(){t=$("<form data-abide novalidate><input type='checkbox' name='groupName' required></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateInput(t.find("input")).should.equal(!1)}),it("returns true for selected select option",function(){t=$("<form data-abide><select required><option value=''></option><option value='One'>One</option><option value='Two' selected='selected'>Two</option></select></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateInput(t.find("select")).should.equal(!0),t.find("select").val().should.equal("Two")}),it("returns false for unselected select option",function(){t=$("<form data-abide><select required><option value=''></option><option value='One'>One</option><option value='Two'>Two</option></select></form>").appendTo("body"),(e=new Foundation.Abide(t,{})).validateInput(t.find("select")).should.equal(!1)})}),describe("addErrorClasses()",function(){it("adds aria-invalid attribute to element",function(){t=$('<form data-abide><input type="text"></form>').appendTo("body"),(e=new Foundation.Abide(t,{})).addErrorClasses(t.find("input")),t.find("input").should.have.attr("aria-invalid","true")})}),describe("addGlobalErrorA11yAttributes()",function(){it("adds [aria-live] attribute on element",function(){t=$("<form data-abide><span data-abide-error></span></form>").appendTo("body"),(e=new Foundation.Abide(t,{a11yErrorLevel:"test-level"})).addA11yAttributes(t.find("[data-abide-error]")),t.find("[data-abide-error]").should.have.attr("aria-live","test-level")})}),describe("addA11yAttributes()",function(){it("adds [aria-describedby] attribute to field and [for] attribute to form error",function(){t=$('\n        <form data-abide>\n          <input type="text" id="test-input">\n          <label class="form-error" id="test-error">Form error</label>\n        </form>\n      ').appendTo("body"),(e=new Foundation.Abide(t,{})).addA11yAttributes(t.find("input")),t.find("input").should.have.attr("aria-describedby","test-error"),t.find("label.form-error").should.have.attr("for","test-input")}),it("adds attributes and ids when no id is set",function(){t=$('\n        <form data-abide>\n          <input type="text">\n          <label class="form-error">Form error</label>\n        </form>\n      ').appendTo("body"),(e=new Foundation.Abide(t,{})).addA11yAttributes(t.find("input"));const i=t.find(".form-error").attr("id");t.find(".form-error").should.have.attr("id").exist,t.find("input").should.have.attr("aria-describedby",i);const o=t.find("input").attr("id");t.find("input").should.have.attr("id").exist,t.find(".form-error").should.have.attr("for",o)})}),describe("removeErrorClasses()",function(){it("removes aria-invalid attribute from element",function(){t=$('<form data-abide><input type="text"></form>').appendTo("body"),(e=new Foundation.Abide(t,{})).addErrorClasses(t.find("input")),e.removeErrorClasses(t.find("input")),t.find("input").should.not.have.attr("aria-invalid")})}),describe("removeRadioErrorClasses()",function(){it("removes aria-invalid attribute from radio group",function(){t=$('<form data-abide><input type="radio" name="groupName"></form>').appendTo("body"),(e=new Foundation.Abide(t,{})).addErrorClasses(t.find("input")),e.removeRadioErrorClasses("groupName"),t.find("input").should.not.have.attr("aria-invalid")})}),describe("removeCheckboxErrorClasses()",function(){it("removes aria-invalid attribute from checkbox group",function(){t=$('<form data-abide><input type="checkbox" name="groupName"></form>').appendTo("body"),(e=new Foundation.Abide(t,{})).addErrorClasses(t.find("input")),e.removeCheckboxErrorClasses("groupName"),t.find("input").should.not.have.attr("aria-invalid")})}),describe("resetForm()",function(){it("removes aria-invalid attribute from elements",function(){t=$('<form data-abide><input type="text"></form>').appendTo("body"),(e=new Foundation.Abide(t,{})).addErrorClasses(t.find("input")),e.resetForm(),t.find("input").should.not.have.attr("aria-invalid")})})});
//# sourceMappingURL=/sm/213bbd3e699089d3d616120ce2644e2d60eca58d2e0fc857350e1892f297cc15.map