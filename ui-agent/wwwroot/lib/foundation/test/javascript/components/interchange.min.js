/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/foundation-sites@6.6.3/test/javascript/components/interchange.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("Interchange",function(){var e,n,t=function(e,n){switch(e){case"image":case"background":return`_build/assets/img/interchange/strip_icc()/${n}.jpg`;default:return`_build/assets/partials/interchange-${n}.html`}},a=function(e,n={}){e=e||"template";const a=Object.keys(n).map(e=>`data-${e}="${n[e]}"`).join(" ");switch(e){case"image":return`<img data-interchange="\n            [${t(e,"small")}, small],\n            [${t(e,"medium")}, medium],\n            [${t(e,"large")}, large]\n          " ${a}>`;case"background":return`<div data-interchange="\n            [${t(e,"small")}, small],\n            [${t(e,"medium")}, medium],\n            [${t(e,"large")}, large]\n          " ${a}></div>`;default:return`<div data-interchange="\n            [${t(e,"default")}, small],\n            [${t(e,"medium")}, medium],\n            [${t(e,"large")}, large]\n          " ${a}></div>`}};afterEach(function(){e.destroy(),n.remove()}),describe("constructor()",function(){it("stores the element and plugin options",function(){n=$(a("template")).appendTo("body"),(e=new Foundation.Interchange(n,{})).$element.should.be.an("object"),e.options.should.be.an("object")})}),describe("replace()",function(){it("replaces src attribute of img",function(){n=$(a("image")).attr("data-interchange","").appendTo("body"),(e=new Foundation.Interchange(n,{})).replace(t("img","large")),n.should.have.attr("src",t("img","large"))}),it("replaces background style of divs",function(){n=$(a("background")).attr("data-interchange","").appendTo("body"),(e=new Foundation.Interchange(n,{})).replace(t("background","large")),n[0].style.backgroundImage.should.contain(t("background","large").replace(/\(/g,"%28").replace(/\)/g,"%29"))}),it("replaces contents of div with templates",function(){n=$(a("template")).attr("data-interchange","").appendTo("body"),e=new Foundation.Interchange(n,{});var i=sinon.spy($,"get");e.replace(t("template","large")),sinon.assert.calledWith(i,t("template","large")),i.restore()}),it("replaces the following the `type` option",function(){n=$(a("background")).attr("data-interchange","").appendTo("body"),(e=new Foundation.Interchange(n,{type:"src"})).replace(t("img","large")),n.should.have.attr("src",t("img","large")),n[0].style.backgroundImage.should.equal("")}),it("fires replaced.zf.interchange event",function(){n=$(a("image")).appendTo("body"),e=new Foundation.Interchange(n,{});let i=sinon.spy();n.on("replaced.zf.interchange",i),e.replace(t("image","large")),sinon.assert.called(i)})}),describe("reflow()",function(){it("calls replace for given media query",function(){n=$(a("image")).attr("data-interchange","[image.png, (min-width: 1px)]").appendTo("body"),e=new Foundation.Interchange(n,{});let t=sinon.spy();e.replace=t,e._reflow(),sinon.assert.calledWith(t,"image.png")})}),describe("parseOptions()",function(){it("retrieve options",function(){n=$(a("template",{type:"src"})).appendTo("body"),(e=new Foundation.Interchange(n))._parseOptions(),e.options.type.should.be.equal("src")}),it("use defaults for invalid options",function(){n=$(a("template",{type:"src"})).appendTo("body"),(e=new Foundation.Interchange(n,{type:"invalid-option"}))._parseOptions(),e.options.type.should.be.equal("auto")})}),describe("generateRules()",function(){it("extracts rules from the plugin element",function(){n=$(a("image")).appendTo("body"),(e=new Foundation.Interchange(n,{}))._generateRules(n),e.rules.length.should.be.equal(3)}),it("extracts special queries from the plugin element",function(){n=$(a("image")).attr("data-interchange","[image.png, retina]").appendTo("body"),(e=new Foundation.Interchange(n,{}))._generateRules(n),e.rules[0].query.should.be.equal(Foundation.Interchange.SPECIAL_QUERIES.retina)})}),describe("addBreakpoints()",function(){it("adds Foundation breakpoints to special queries",function(){n=$(a("image")).appendTo("body"),e=new Foundation.Interchange(n,{});var t=Object.keys(Foundation.Interchange.SPECIAL_QUERIES).length,i=Foundation.MediaQuery.queries.length;Foundation.MediaQuery.queries.push({name:"test-query",value:"test-query-value"}),e._addBreakpoints(n),Object.keys(Foundation.Interchange.SPECIAL_QUERIES).length.should.be.equal(t+1),Foundation.MediaQuery.queries.length=i})}),describe("events()",function(){it("calls reflow on viewport size change once",function(t){n=$(a("image")).appendTo("body"),e=new Foundation.Interchange(n,{});Foundation.Triggers.Initializers.addMutationEventsListener($(document)),Foundation.Triggers.Initializers.addResizeListener(10),$.triggersInitialized=!0,setTimeout(function(){let n=sinon.spy(e,"_reflow");$(window).trigger("resize"),$(window).trigger("resize"),setTimeout(function(){$(window).trigger("resize"),$(window).trigger("resize"),tryInterval({interval:10,timeout:1e3,try:()=>{sinon.assert.calledOnce(n)},then:()=>{$.triggersInitialized=!1,t()}})})})})})});
//# sourceMappingURL=/sm/e09e4bc0fbe9aa93ded200b100db80d781280d23d2f2416f0a34777139555f4c.map