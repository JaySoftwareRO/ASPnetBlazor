# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ master ]

jobs:
  clients:
    runs-on: ubuntu-18.04

    steps:
#    - name: Add msbuild to PATH
#      uses: microsoft/setup-msbuild@v1.0.1
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.5.0
      with:
        dotnet-version: 3.1.x

    - name: Setup Node.js environment
      uses: actions/setup-node@v1.4.2
      with:
        node-version: 12.x

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends software-properties-common
        sudo dpkg --add-architecture i386
        sudo curl -L https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_18.04/Release.key > winehq.key
        sudo apt-key add winehq.key
        sudo apt-add-repository 'deb https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_18.04/ ./'
        sudo apt-get update
        sudo apt-get -y purge software-properties-common libdbus-glib-1-2 python3-dbus python3-gi python3-pycurl python3-software-properties
        sudo apt-get install -y --no-install-recommends winehq-stable
        sudo curl -L https://github.com/electron-userland/electron-builder-binaries/releases/download/wine-2.0.3-mac-10.13/wine-home.zip > /tmp/wine-home.zip
        sudo unzip /tmp/wine-home.zip -d /root/.wine
        sudo unlink /tmp/wine-home.zip

    - name: Install web compiler electronize tools
      run: |
        dotnet tool install Excubo.WebCompiler --global --version 2.3.2
        dotnet tool install ElectronNET.CLI -g

    - name: Restore packages and build
      run: |
        dotnet restore
        dotnet build

    - name: Build client app packages
      env:
        WINEDEBUG: -all,err+all
        WINEDLLOVERRIDES: winemenubuilder.exe=d
        BUILD_NUMBER: ${{ github.run_number }}
      run: |
        cd ui-agent
        dotnet build
        electronize build /target win /PublishReadyToRun false
        mv "bin/Desktop/ui-agent Setup 1.0.0.exe" "bin/Desktop/ui-agent-${{ github.run_number }}.exe"
        # electronize build /target linux
        # electronize build /target osx
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: 'ui-agent/bin/Desktop/ui-agent-${{ github.run_number }}.exe'
        asset_name: ui-agent-${{ github.run_number }}.exe
        asset_content_type: application/octet-stream
  server:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: Docker Image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: viovanov/bifrost
        tags: ${{ github.run_number }}
        dockerfile: bifrost/Dockerfile
