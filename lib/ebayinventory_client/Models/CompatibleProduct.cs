// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ebayinventory.Models
{
    using System.Collections.Generic;
    using Newtonsoft.Json;

    /// <summary>
    /// This type is used to specify/indicate the motor vehicles that are
    /// compatible with the corresponding inventory item.
    /// </summary>
    public partial class CompatibleProduct
    {
        /// <summary>
        /// Initializes a new instance of the CompatibleProduct class.
        /// </summary>
        public CompatibleProduct() { }

        /// <summary>
        /// Initializes a new instance of the CompatibleProduct class.
        /// </summary>
        public CompatibleProduct(IList<NameValueList> compatibilityProperties = default(IList<NameValueList>), string notes = default(string), ProductFamilyProperties productFamilyProperties = default(ProductFamilyProperties), ProductIdentifier productIdentifier = default(ProductIdentifier))
        {
            CompatibilityProperties = compatibilityProperties;
            Notes = notes;
            ProductFamilyProperties = productFamilyProperties;
            ProductIdentifier = productIdentifier;
        }

        /// <summary>
        /// This container consists of an array of motor vehicles that are
        /// compatible with the motor vehicle part or accessory specified by
        /// the SKU value in the call URI. Each motor vehicle is defined
        /// through a separate set of name/value pairs. In the name field,
        /// the vehicle aspect (such as 'make', 'model', 'year', 'trim', or
        /// 'engine') will be identified, and the value field will be used to
        /// identify the value of each aspect. The getCompatibilityProperties
        /// method of the Taxonomy API can be used to retrieve applicable
        /// vehicle aspect names for a specified category, and the
        /// getCompatibilityPropertyValues method of the Taxonomy API can be
        /// used to retrieve possible values for these same vehicle aspect
        /// names. Below is an example of identifying one motor vehicle using
        /// the compatibilityProperties container:
        /// &amp;quot;compatibilityProperties&amp;quot; : [
        /// &amp;nbsp;&amp;nbsp;{
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; :
        /// &amp;quot;make&amp;quot;,
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; :
        /// &amp;quot;Subaru&amp;quot; &amp;nbsp;&amp;nbsp;},
        /// &amp;nbsp;&amp;nbsp;{
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; :
        /// &amp;quot;model&amp;quot;,
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; :
        /// &amp;quot;GL&amp;quot; &amp;nbsp;&amp;nbsp;},
        /// &amp;nbsp;&amp;nbsp;{
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; :
        /// &amp;quot;year&amp;quot;,
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; :
        /// &amp;quot;1983&amp;quot; &amp;nbsp;&amp;nbsp;},
        /// &amp;nbsp;&amp;nbsp;{
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; :
        /// &amp;quot;trim&amp;quot;,
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; :
        /// &amp;quot;Base Wagon 4-Door&amp;quot; &amp;nbsp;&amp;nbsp;},
        /// &amp;nbsp;&amp;nbsp;{
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; :
        /// &amp;quot;engine&amp;quot;,
        /// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; :
        /// &amp;quot;1.8L Turbocharged&amp;quot; &amp;nbsp;&amp;nbsp;} ]
        /// Typically, the make, model, and year of the motor vehicle are
        /// always required, with the trim and engine being necessary
        /// sometimes, but it will be dependent on the part or accessory, and
        /// on the vehicle class. Note: The productFamilyProperties container
        /// is in the process of being deprecated and will no longer be
        /// supported in February of 2021, so if you are a new user of
        /// createOrReplaceProductCompatibility, you should use the
        /// compatibilityProperties container instead, and if you are already
        /// integrated and using the productFamilyProperties container, you
        /// should make plans to migrate to compatibilityProperties. The
        /// productFamilyProperties and compatibilityProperties containers
        /// may not be used together or the call will fail.
        /// </summary>
        [JsonProperty(PropertyName = "compatibilityProperties")]
        public IList<NameValueList> CompatibilityProperties { get; set; }

        /// <summary>
        /// This field is optionally used by the seller to input any notes
        /// pertaining to the compatible vehicle list being defined. The
        /// seller might use this field to specify the placement of the part
        /// on a vehicle or other applicable information. This field will
        /// only be returned if specified by the seller. Max Length: 500
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productFamilyProperties")]
        public ProductFamilyProperties ProductFamilyProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productIdentifier")]
        public ProductIdentifier ProductIdentifier { get; set; }

    }
}
