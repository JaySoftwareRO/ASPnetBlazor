// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ebayinventory.Models
{
    using System.Collections.Generic;
    using Newtonsoft.Json;

    /// <summary>
    /// This type provides details of an offer, and is used by the base
    /// request payload of the &lt;strong&gt;updateOffer&lt;/strong&gt; call.
    /// Every field that is currently set with the unpublished/published
    /// offer must also be passed into the
    /// &lt;strong&gt;updateOffer&lt;/strong&gt; call, even those fields
    /// whose values are not changing. Note that for published offers, a
    /// successful &lt;strong&gt;updateOffer&lt;/strong&gt; call will
    /// actually update the active eBay listing with whatever changes were
    /// made.
    /// </summary>
    public partial class EbayOfferDetailsWithId
    {
        /// <summary>
        /// Initializes a new instance of the EbayOfferDetailsWithId class.
        /// </summary>
        public EbayOfferDetailsWithId() { }

        /// <summary>
        /// Initializes a new instance of the EbayOfferDetailsWithId class.
        /// </summary>
        public EbayOfferDetailsWithId(int? availableQuantity = default(int?), string categoryId = default(string), Charity charity = default(Charity), bool? includeCatalogProductDetails = default(bool?), string listingDescription = default(string), string listingDuration = default(string), ListingPolicies listingPolicies = default(ListingPolicies), int? lotSize = default(int?), string merchantLocationKey = default(string), PricingSummary pricingSummary = default(PricingSummary), int? quantityLimitPerBuyer = default(int?), IList<string> storeCategoryNames = default(IList<string>), Tax tax = default(Tax))
        {
            AvailableQuantity = availableQuantity;
            CategoryId = categoryId;
            Charity = charity;
            IncludeCatalogProductDetails = includeCatalogProductDetails;
            ListingDescription = listingDescription;
            ListingDuration = listingDuration;
            ListingPolicies = listingPolicies;
            LotSize = lotSize;
            MerchantLocationKey = merchantLocationKey;
            PricingSummary = pricingSummary;
            QuantityLimitPerBuyer = quantityLimitPerBuyer;
            StoreCategoryNames = storeCategoryNames;
            Tax = tax;
        }

        /// <summary>
        /// This integer value sets the quantity of the inventory item that
        /// will be available through the offer. Quantity must be set to 1 or
        /// more in order for the inventory item to be purchasable. This
        /// value should not be more than the quantity that is specified for
        /// the inventory item record. If this field exists for the current
        /// unpublished or published offer, it should be provided again in
        /// the updateOffer call, even if the value is not changing. If this
        /// particular field is omitted in an updateOffer call, the general
        /// available quantity set for the inventory item record may be used
        /// instead, and this may not be accurate if the inventory item is
        /// being sold across multiple marketplaces.
        /// </summary>
        [JsonProperty(PropertyName = "availableQuantity")]
        public int? AvailableQuantity { get; set; }

        /// <summary>
        /// The unique identifier of the eBay category that the inventory item
        /// is/will be listed under. This field is not immediately required
        /// for an unpublished offer, but will be required before publishing
        /// the offer. Sellers can use the getCategorySuggestions method of
        /// the Taxonomy API or the GetSuggestedCategories call of the
        /// Trading API to retrieve suggested category ID values. The seller
        /// passes in a query string like &amp;quot;iPhone 6&amp;quot;, and
        /// category ID values for suggested categories are returned in the
        /// response. If this field exists for the current unpublished offer,
        /// it should be provided again in the updateOffer call, even if the
        /// eBay category is not changing. For a published offer (aka active
        /// eBay listing), this field must be provided or an error may occur.
        /// The eBay category of an active eBay listing cannot be changed
        /// once the listing has one or more sales, or if the listing is
        /// scheduled to end in less than 12 hours.
        /// </summary>
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "charity")]
        public Charity Charity { get; set; }

        /// <summary>
        /// This field indicates whether or not eBay product catalog details
        /// are applied to a listing. A value of true indicates the listing
        /// corresponds to the eBay product associated with the provided
        /// product identifier. The product identifier is provided in
        /// createOrReplaceInventoryItem. Note: Though the
        /// includeCatalogProductDetails parameter is not required to be
        /// submitted in the request, the parameter defaults to 'true' if
        /// omitted.
        /// </summary>
        [JsonProperty(PropertyName = "includeCatalogProductDetails")]
        public bool? IncludeCatalogProductDetails { get; set; }

        /// <summary>
        /// The text in this field is (published offers), or will become
        /// (unpublished offers) the description of the eBay listing. This
        /// field is not immediately required for an unpublished offer, but
        /// will be required before publishing the offer. Note that if the
        /// listingDescription field was omitted in the createOffer call for
        /// the offer, the offer entity should have picked up the text
        /// provided in the product.description field of the inventory item
        /// record, or if the inventory item is part of a group, the offer
        /// entity should have picked up the text provided in the description
        /// field of the inventory item group record. HTML tags and markup
        /// can be used in listing descriptions, but each character counts
        /// toward the max length limit. Note: To ensure that their short
        /// listing description is optimized when viewed on mobile devices,
        /// sellers should strongly consider using eBay's View Item
        /// description summary feature when listing their items. Keep in
        /// mind that the 'short' listing description is what prospective
        /// buyers first see when they view the listing on a mobile device.
        /// The 'full' listing description is also available to mobile users
        /// when they click on the short listing description, but the full
        /// description is not automatically optimized for viewing in mobile
        /// devices, and many users won't even drill down to the full
        /// description. Using HTML div and span tag attributes, this feature
        /// allows sellers to customize and fully control the short listing
        /// description that is displayed to prospective buyers when viewing
        /// the listing on a mobile device. The short listing description on
        /// mobile devices is limited to 800 characters, and whenever the
        /// full listing description (provided in this field, in UI, or
        /// seller tool) exceeds this limit, eBay uses a special algorithm to
        /// derive the best possible short listing description within the
        /// 800-character limit. However, due to some short listing
        /// description content being removed, it is definitely not ideal for
        /// the seller, and could lead to a bad buyer experience and possibly
        /// to a Significantly not as described (SNAD) case, since the buyer
        /// may not get complete details on the item when viewing the short
        /// listing description. See the eBay help page for more details on
        /// using the HTML div and span tags. If this field exists for the
        /// current unpublished offer, it should be provided again in the
        /// updateOffer call, even if the text is not changing. For a
        /// published offer (aka active eBay listing), this field must be
        /// provided or an error may occur. Max length: 500000 (which
        /// includes HTML markup/tags)
        /// </summary>
        [JsonProperty(PropertyName = "listingDescription")]
        public string ListingDescription { get; set; }

        /// <summary>
        /// Note: This field is not necessary (and has no effect) since 'GTC'
        /// (Good 'til Cancelled) is the only supported listing duration, and
        /// the listingDuration value gets set to GTC by default. This field
        /// indicates the number of days that the seller wants the listing to
        /// be active. 'GTC' listings are automatically renewed each calendar
        /// month until the seller decides to end the listing. For
        /// implementation help, refer to &lt;a
        /// href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ListingDurationEnum.html'&gt;eBay
        /// API documentation&lt;/a&gt;
        /// </summary>
        [JsonProperty(PropertyName = "listingDuration")]
        public string ListingDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "listingPolicies")]
        public ListingPolicies ListingPolicies { get; set; }

        /// <summary>
        /// This field is only applicable if the listing is a lot listing. A
        /// lot listing is a listing that has multiple quantity of the same
        /// product. An example would be a set of four identical car tires.
        /// The integer value passed into this field is the number of
        /// identical items being sold through the lot listing.
        /// </summary>
        [JsonProperty(PropertyName = "lotSize")]
        public int? LotSize { get; set; }

        /// <summary>
        /// The unique identifier of a merchant's inventory location (where
        /// the inventory item in the offer is located). A
        /// merchantLocationKey value is established when the merchant
        /// creates an inventory location using the createInventoryLocation
        /// call. To get more information about inventory locations, the
        /// getInventoryLocation call can be used. This field is not
        /// initially required upon first creating an offer, but will become
        /// required before an offer can be published. Max length: 36
        /// </summary>
        [JsonProperty(PropertyName = "merchantLocationKey")]
        public string MerchantLocationKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pricingSummary")]
        public PricingSummary PricingSummary { get; set; }

        /// <summary>
        /// This field is only applicable and set if the seller wishes to set
        /// a restriction on the purchase quantity per seller. If this field
        /// is set by the seller for the offer, then each distinct buyer may
        /// purchase up to, but not exceeding the quantity specified for this
        /// field. So, if this field's value is 5, each buyer may purchase
        /// between one to five of these products, and the purchases can
        /// occur in one multiple-quantity purchase, or over multiple
        /// transactions. If a buyer attempts to purchase one or more of
        /// these products, and the cumulative quantity will take the buyer
        /// beyond the quantity limit, that buyer will be blocked from that
        /// purchase. If this field currently exists for an unpublished or
        /// published offer, it should be provided again in an updateOffer
        /// call, even if the value is not changing.
        /// </summary>
        [JsonProperty(PropertyName = "quantityLimitPerBuyer")]
        public int? QuantityLimitPerBuyer { get; set; }

        /// <summary>
        /// This container is used if the seller would like to place the
        /// inventory item into one or two store categories that the seller
        /// has set up for their eBay store. The string value(s) passed in to
        /// this container will be the full path(s) to the store categories,
        /// as shown below: &amp;quot;storeCategoryNames&amp;quot;: [
        /// &amp;quot;/Fashion/Men/Shirts&amp;quot;,
        /// &amp;quot;/Fashion/Men/Accessories&amp;quot; ], If this field
        /// currently exists for an unpublished or published offer, it should
        /// be provided again in an updateOffer call, even if the eBay
        /// categories are not changing.
        /// </summary>
        [JsonProperty(PropertyName = "storeCategoryNames")]
        public IList<string> StoreCategoryNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tax")]
        public Tax Tax { get; set; }

    }
}
